name: lifegoals
description: Flutter lifegoals app

# troubleshooting
#
# install melos
# $ dart pub global activate melos
#
# install fvm
# $ dart pub global activate fvm

# configure melos to use sdk configured with fvm (can be overridden using env params for CI/CD)
# fvm flutter sdk is configured in .fvm/fvm_config.json
# sdkPath: .fvm/flutter_sdk

# not currently needed - check before taking in use
# configure melos to use pubspec.yaml overrides
#command:
#  bootstrap:
#    usePubspecOverrides: true


packages:
  - .

scripts:

  # clean selected package
  clean:select:
    run: flutter clean
    description: Clean selected package.
    exec:
      concurrency: 1
    packageFilters:
      file-exists: pubspec.yaml

  # clean all packages
  clean:
    run: melos run clean:select --no-select
    description: Clean all packages.

  # get dependencies for selected package
  get:select:
    run: dart pub get
    description: Get all dependencies for selected packages.
    exec:
      concurrency: 1
    packageFilters:
      file-exists: pubspec.yaml

  # get dependencies for all packages
  get:
    run: melos run get:select --no-select
    description: Get all dependencies for all packages.

  # generation of intl files for all flutter packages that have l10n.yaml
  # configuration is in packages l10n.yaml
  intl:select:
    run: melos exec -c 1 -- flutter gen-l10n
    description: Generate intl files for all packages.
    packageFilters:
      flutter: true
      dirExists: lib/src/l10n

  # generation of all intl files
  intl:
    run: melos run intl:select --no-select
    description: Run all intl generations in this project.

  # formats code at single package
  format:select:
    run: melos exec dart format . --fix
    description: Run `dart format` for selected package.
    packageFilters:
      file-exists: pubspec.yaml

  # formats all dart code
  format:
    run: melos run format:select --no-select
    description: Format code in all packages.

  # checks if dart code is following format - fails if not
  format:check:select:
    run: melos exec dart format . --output none --set-exit-if-changed
    description: Run `dart format` checks for all packages.
    packageFilters:
      file-exists: pubspec.yaml

  # checks if dart code is following format - fails if not
  format:check:
    run: melos run format:check:select --no-select
    description: Run format checks for all packages.

  analyze:select:
    run: |
      melos exec -c 1 -- \
        flutter analyze --congratulate
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    packageFilters:
      file-exists: pubspec.yaml

  # runs analyze on every package
  # just running "fvm flutter analyze" in root of project might be the way to go
  analyze:
    run: melos run analyze:select --no-select
    description: Run analyze in all packages.

  # generate code on single package that has build runner as dependency
  generate:select:
    run: melos exec -c 1 -- "dart run build_runner build --delete-conflicting-outputs"
    description: Build all generated files for single Dart package in this project.
    packageFilters:
      dependsOn: build_runner

  # generate code on each package that has build runner as dependency
  generate:
    run: melos exec -c 1 --depends-on="build_runner" -- "dart run build_runner build --delete-conflicting-outputs"
    description: Build all generated files for Dart packages in this project.

  # runs all tests in selected package
  test:select:
    run: melos exec -- flutter test
    packageFilters:
      dirExists: test
    description: Run `flutter test` for selected packages.

  # runs all tests in all packages
  test:
    run: melos run test:select --no-select
    description: Run all Flutter tests in this project.

  # gives a list of packages to which one can selected and code coverage is measured for exactly this one
  # NOTE: this kind of approach does not work with windows
  coverage:
    run: |
      melos exec -- flutter test --coverage &&
      melos exec -- genhtml coverage/lcov.info --output-directory=coverage/
    packageFilters:
      dirExists: test
    description: Generate coverage for the selected package.

  metrics:
    run: |
      melos exec -c 1 --ignore="*example*" -- \
        dcm analyze lib
    description: |
      Run DCM in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  build:all:
    run: |
      melos bootstrap
      melos run build:ios_pub --no-select
      melos run build:android_pub --no-select
      melos run build:web --no-select
    description: Build all apps

  build:ios:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build ios --no-codesign --no-pub"
    description: Build a specific app for iOS.
    packageFilters:
      dirExists:
        - ios

  build:ios_pub:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build ios --no-codesign"
    description: |
      Build a specific app for iOS.
      melos bootstrap does not generate all files generated by a build that runs
      `pub get`, and `flutter drive` does not either, so it is still necessary to
      build sometimes without the `--no-pub` switch. Careful: `melos bootstrap` after.
    packageFilters:
      dirExists:
        - ios

  build:android:dev:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk --flavor development --target lib/main_development.dart"
    description: Build a specific app for Android.
    packageFilters:
      dirExists:
        - android

  build:android:prod:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk --flavor production --target lib/main_production.dart"
    description: Build a specific app for Android.
    packageFilters:
      dirExists:
        - android

  build:android_pub:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk"
    description: Build a specific app for Android.
    packageFilters:
      dirExists:
        - android

  build:macos:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build macos --no-pub"
    description: |
      Build a specific app for macOS.
       - Requires `flutter channel stable`.
       - Requires `flutter config --enable-macos-desktop` set.
    packageFilters:
      dirExists:
        - macos

  build:linux:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build linux --no-pub"
    description: |
      Build a specific app for web.
       - Requires `flutter channel stable`.
       - Requires `flutter config --enable-linux-desktop` set.
    packageFilters:
      dirExists:
        - linux

  build:windows:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build windows --no-pub"
    description: |
      Build a specific app for windows.
       - Requires `flutter channel stable`.
       - Requires `flutter config --enable-windows-desktop` set.
    packageFilters:
      dirExists:
        - windows

  build:web:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build web --no-pub"
    description: |
      Build a specific app for web.
       - Requires `flutter channel stable`.
    packageFilters:
      dirExists:
        - web

